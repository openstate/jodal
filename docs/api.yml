swagger: "2.0" # Swagger version compatible with OAS 3.0
info:
 description: "De API van Bron"
 version: "1.0.0" # This is your api version
 title: "Bron API"
host: "api.bron.live"
basePath: "/"
paths:
  /users/forgot-password:
    post:
      tags:
        - Users
      summary: "Send a forgotten password email to a user"
      description: "This starts a forgotten password sequence for the specified user. A link will be sent where the user can reset his/hr password."
      produces:
        - "application/json"
      parameters:
      - name: "email"
        in: "form" # This is saying that this parameter must be given in a query string
        description: "The email address for which a forgotten password email is sent."
        type: "String"
        required: true
        example: "breyten@openstate.eu"
      responses:
        301:
          description: "The email was succesfully sent. Redirecto to front page."
        200:
          description: "Something went wrong sending out the password lost email"
          schema:
            type: "object"
            error:
              type: "string"
              example: "Something wemt wrong."
          examples:
            application/json: {"error": "Something went wrong."}
  /users/login:
    post:
      tags:
        - Users
      summary: "Starts login procedure for a user."
      description: "Log in a user. The parameters email and password can be specified via the form or via the query, but both need to be present."
      produces:
        - "application/json"
      parameters:
      - name: "email"
        description: "The email address of the user."
        in: "query"
        required: false
        example: "breyten@openstate.eu"
      - name: "password"
        description: "The password used for loggin in."
        in: "query"
        required: false
        example: "password123"
      - name: "email"
        description: "The email address of the user."
        in: "form"
        required: false
        example: "breyten@openstate.eu"
      - name: "password"
        description: "The password used for loggin in."
        in: "form"
        required: false
        example: "password123"
      responses:
        301:
          description: "The login was succesful. Redirecto to front page."
        200:
          description: "Something went wrong loggin in"
          schema:
            type: "object"
            error:
              type: "string"
          examples:
            application/json: {"error": "Something went wrong."}
    get:
      tags:
        - Users
      summary: "Starts login procedure for a user"
      description: "Log in a user. Redirect to frontpage if successful"
      produces:
           - "application/json"
      parameters:
      - name: "email"
        description: "The email address of the user."
        in: "query"
        required: true
        example: "breyten@openstate.eu"
      - name: "password"
        description: "The password used for loggin in."
        in: "query"
        required: true
        example: password123
      responses:
        301:
          description: "The login was succesful. Redirecto to front page."
        200:
          description: "Something went wrong loggin in"
          schema:
            type: "object"
            error:
              type: "string"
          examples:
            application/json: {"error": "Something went wrong."}
  /users/passwordless/start:
    get:
      tags:
        - Users
      summary: "Starts a passwordless login for a user."
      description: "Starts a passwordless login for a user. An email address should be provided, or a user id."
      produces:
           - "application/json"
      parameters:
      - name: "email"
        description: "The email address of the user."
        in: "query"
        required: false
        example: "breyten@openstate.eu"
      - name: "user_id"
        description: "The user id."
        in: "query"
        required: false
        example: 1755
      responses:
        200:
          description: "The procedure was started"
          schema:
            type: "object"
            code:
              type: "string"
              description: "One time use login code. If this key is pesent, the passwordless login start was sucessful."
            error:
              type: "string"
              description: "If this key is present, there as an error sending the password login start. It describes the error."
          examples:
            application/json: {"code": "123456", "error": "Something went wrong."}
  /users/passwordless/complete:
    get:
      tags:
        - Users
      summary: "Completes a pasdswordless login for a user"
      description: "Complete the passwordless login. Places cookie and adds session info for further use."
      produces:
        - "application/json"
      parameters:
      - name: "code"
        description: "Login code that was sent."
        in: "query"
        required: true
        example: 123456
      responses:
        301:
          description: "The login was succesful. Redirecto to front page."
        200:
          description: "Something went wrong loggin in"
          schema:
            type: "object"
            error:
              description: "The contents describe the error encountered."
              type: "string"
          examples:
            application/json: {"error": "Something went wrong."}
  /users/register:
    post:
      tags:
        - Users
      summary: "Registers a new user"
      description: "Registeres a new user based on the given email address and password. A welcome email is sent."
      produces:
           - "application/json"
      parameters:
      - name: "email"
        description: "The email address of the user."
        in: "form"
        required: true
        example: breyten@openstate.eu
      - name: "password"
        description: "The password used for logging in."
        in: "form"
        required: true
        example: password123
      responses:
        301:
          description: "The registration was succesful and an email was sent. Redirecto to front page."
        200:
          description: "Something went wrong registering the user. The contents describe the error encountered."
          schema:
            type: "object"
            error:
              type: "string"
          examples:
            application/json: {"error": "Something went wrong."}
  /users/delete:
    get:
      tags:
        - Users
      summary: "Deletes a user"
      description: "Deletes a user and his/her associated info from the database. Only a logged in user can delete her/himself using this method."
      produces:
           - "application/json"
      responses:
        200:
          description: "The user was deleted. Redirects to the front page."
  /users/simple/me:
    get:
      tags:
        - Users
      summary: "Returns the information of the currently logged in user"
      description: "Returns the info about the user, which is kept in the session."
      produces:
           - "application/json"
      responses:
        200:
          description: "The user data returned. null if not logged in."
          schema:
            type: "object"
            applicationId:
              type: "string"
              description: The application id
            email:
              type: "string"
              description: "The email address of the user."
            email_verified:
              type: "boolean"
              description: "Whether the user was verified or not."
            family_name:
              type: "string"
              description: "The family name of the user"
            given_name:
              type: "string"
              description: "The given name of the user"
            roles:
              type: "list"
              description: "The roles that this user has in admin"
            sub:
              type: "string"
              description : "Show the interal id user for the user,:"
          examples:
            application/json:
              applicationId: "6e11ceb9-2b26-4c40-b399-182d4f9b97b6"
              email: "bje@dds.nl"
              email_verified: false
              family_name: "Ernsting"
              given_name: "Breyten"
              roles:
              - User
              sub: "6e11ceb9-2b26-4c40-b399-182d4f9b97b6"
  /users/simple/login:
    get:
      tags:
        - Users
      summary: "Old way to login"
      description: "Login via the fusionauth login form. Not actively used anymore."
      produces:
           - "application/json"
  users/simple/logout:
    get:
      tags:
        - Users
      summary: "Old way to log the user out"
      description: "Old way to logout, via fusionauth logout redirect url. Not actively used anymore."
      produces:
           - "application/json"
  /user/simple/register:
    get:
      tags:
        - Users
      summary: "Old way to register a new user"
      description: "Old way to register a new user via the fusionauth form. Not actively used anymore."
      produces:
           - "application/json"
  /users/simple/callback:
    get:
      tags:
        - Users
      summary: "Completes a OAuth2 login process"
      description: "This is the callback that completes a login sequence. It is used by fusionauth, sets the cookie. It also saves via which of the marketing campaing you logged in, if applicable. This happens mostly when you came in via a link to register."
  /archive/warc/create:
    get:
      tags:
        - WARC
      summary: "Starts a procedure to get heritrix to make a WARC archive of the given URL."
      description: "Instructs the heritrix backend to start a job to create a warc file of the given url. This happens asynchronously. A valid login is required for this to work."
      produces:
           - "application/json"
      parameters:
      - name: "url"
        description: "The website which is the subject of the warc file."
        in: "query"
        required: true
        example: https://openstate.eu/
      responses:
        200:
          description: "The creating of a warc file was started."
          schema:
            type: "object"
            job_id:
              type: "string"
              description: The archive id used if further requests
          examples:
            application/json:
              job_id: "123456-xx-123456-yy"
  /archive/warc/download/{archive_id}:
    get:
      tags:
        - WARC
      summary: "Downloads the given WARC file to your computer."
      produces:
           - "application/json"
      parameters:
      - name: "archive_id"
        in: path
        required: true
        example: "123456-xx-123456-yy"
      responses:
        301:
          description: "Starts downloading the file."
  /archive/warc/{archive_id}:
    get:
      tags:
        - WARC
      summary: "Get the status of a warc given archive"
      produces:
           - "application/json"
      parameters:
      - name: "archive_id"
        in: path
        required: true
        example: "123456-xx-123456-yy"
      responses:
        200:
          description: "The status is returned. See <a href=\"https://heritrix.readthedocs.io/en/latest/api.html#get-job-status\">heritrix documentation</a> for more information."
          schema:
            type: "object"
            job:
              type: "object"
              description: The details of the heritrix job
          examples:
            application/json:
              job:
                shortName: myjob
                crawlControllerState: FINISHED
                crawlExitStatus: FINISHED
                statusDescription: "Finished: FINISHED"
                availableActions:
                  value: teardown
                launchCount: 1
                lastLaunch: 2020-04-01T02:07:42.531Z
                isProfile: false
                primaryConfig: /heritrix/jobs/myjob/crawler-beans.cxml
                primaryConfigUrl: https://localhost:8443/engine/job/myjob/jobdir/crawler-beans.cxml
                url: https://localhost:8443/engine/job/myjob/job/myjob
                jobLogTail:
                  value:
                  - 2020-04-01T03:50:44.708Z INFO FINISHED 20200401020744
                  - 2020-04-01T03:50:42.670Z INFO EMPTY 20200401020744
                  - 2020-04-01T03:50:42.669Z INFO STOPPING 20200401020744
                uriTotalsReport:
                  downloadedUriCount: 3920
                  queuedUriCount: 0
                  totalUriCount: 3920
                  futureUriCount: 0
                sizeTotalsReport:
                  dupByHash: 0
                  dupByHashCount: 0
                  notModified: 0
                  notModifiedCount: 0
                  novel: 2177235508
                  novelCount: 3920
                  total: 2177235508
                  totalCount: 3920
                  warcNovelContentBytes: 2177235508
                  warcNovelUrls: 3920
                rateReport:
                  currentDocsPerSecond: 0.0
                  averageDocsPerSecond: 0.6354171124312226
                  currentKiBPerSec: 0
                  averageKiBPerSec: 344
                loadReport:
                  busyThreads: 0
                  totalThreads: 0
                  congestionRatio: NaN
                  averageQueueDepth: 0
                  deepestQueueDepth: 0
                elapsedReport:
                  elapsedMilliseconds: 6169176
                  elapsedPretty: 1h42m49s176ms
                threadReport:
                frontierReport:
                  totalQueues: 1
                  inProcessQueues: 0
                  readyQueues: 0
                  snoozedQueues: 0
                  activeQueues: 0
                  inactiveQueues: 0
                  ineligibleQueues: 0
                  retiredQueues: 0
                  exhaustedQueues: 1
                  lastReachedState: FINISH
                crawlLogTail:
                  ...

                configFiles:
                  ...

                isLaunchInfoPartial: false
                isRunning: false
                isLaunchable: false
                hasApplicationContext: true
                alertCount: 549
                checkpointFiles:
                alertLogFilePath: /heritrix/jobs/myjob/20200401020744/logs/alerts.log
                crawlLogFilePath: /heritrix/jobs/myjob/20200401020744/logs/crawl.log
                reports:
                  value:
                    className: CrawlSummaryReport
                    shortName: CrawlSummary
                heapReport:
                  usedBytes: 66893400
                  totalBytes: 589824000
                  maxBytes: 2885681152
  /archive/warcs/{archive_ids_str}:
    get:
      tags:
        - WARC
      summary: "Get the status of the given warcs files (separated by ,)"
      produces:
           - "application/json"
      parameters:
      - name: "archive_ids_str"
        description: "The archive ids, separated by a ,"
        in: path
        required: true
        example: "123456-xx-123456-yy"
      responses:
        200:
          description: "The status is returned. See <a href=\"https://heritrix.readthedocs.io/en/latest/api.html#get-job-status\">heritrix documentation</a> for more information."
          schema:
            type: "object"
            job:
              type: "object"
              description: The details of the heritrix job
          examples:
            application/json:
            - job:
                shortName: myjob
                crawlControllerState: FINISHED
                crawlExitStatus: FINISHED
                statusDescription: "Finished: FINISHED"
                availableActions:
                  value: teardown
                launchCount: 1
                lastLaunch: 2020-04-01T02:07:42.531Z
                isProfile: false
                primaryConfig: /heritrix/jobs/myjob/crawler-beans.cxml
                primaryConfigUrl: https://localhost:8443/engine/job/myjob/jobdir/crawler-beans.cxml
                url: https://localhost:8443/engine/job/myjob/job/myjob
                jobLogTail:
                  value:
                  - 2020-04-01T03:50:44.708Z INFO FINISHED 20200401020744
                  - 2020-04-01T03:50:42.670Z INFO EMPTY 20200401020744
                  - 2020-04-01T03:50:42.669Z INFO STOPPING 20200401020744
                uriTotalsReport:
                  downloadedUriCount: 3920
                  queuedUriCount: 0
                  totalUriCount: 3920
                  futureUriCount: 0
                sizeTotalsReport:
                  dupByHash: 0
                  dupByHashCount: 0
                  notModified: 0
                  notModifiedCount: 0
                  novel: 2177235508
                  novelCount: 3920
                  total: 2177235508
                  totalCount: 3920
                  warcNovelContentBytes: 2177235508
                  warcNovelUrls: 3920
                rateReport:
                  currentDocsPerSecond: 0.0
                  averageDocsPerSecond: 0.6354171124312226
                  currentKiBPerSec: 0
                  averageKiBPerSec: 344
                loadReport:
                  busyThreads: 0
                  totalThreads: 0
                  congestionRatio: NaN
                  averageQueueDepth: 0
                  deepestQueueDepth: 0
                elapsedReport:
                  elapsedMilliseconds: 6169176
                  elapsedPretty: 1h42m49s176ms
                threadReport:
                frontierReport:
                  totalQueues: 1
                  inProcessQueues: 0
                  readyQueues: 0
                  snoozedQueues: 0
                  activeQueues: 0
                  inactiveQueues: 0
                  ineligibleQueues: 0
                  retiredQueues: 0
                  exhaustedQueues: 1
                  lastReachedState: FINISH
                crawlLogTail:
                  ...

                configFiles:
                  ...

                isLaunchInfoPartial: false
                isRunning: false
                isLaunchable: false
                hasApplicationContext: true
                alertCount: 549
                checkpointFiles:
                alertLogFilePath: /heritrix/jobs/myjob/20200401020744/logs/alerts.log
                crawlLogFilePath: /heritrix/jobs/myjob/20200401020744/logs/crawl.log
                reports:
                  value:
                    className: CrawlSummaryReport
                    shortName: CrawlSummary
                heapReport:
                  usedBytes: 66893400
                  totalBytes: 589824000
                  maxBytes: 2885681152
            - job:
                shortName: job2
  /assets:
    get:
      tags:
        - Assets
      summary: "Returns the assets associated with the logged in user."
      produces:
           - "application/json"
      responses:
        200:
          schema:
            $ref: '#/definitions/Asset'
          examples:
            application/json:
            - id: 1
              user_id: 1755
              url: https://openstate.eu/
              external_id: 123456-xx-123456-yy
              created: 2024-01-01T00:00:00
              modified: 2024-01-01T00:00:00
              last_run: 2024-01-01T00:00:00
    post:
      tags:
        - Assets
      summary: "Create a new asset associated with the logged in user."
      produces:
           - "application/json"
      parameters:
      - name: "user_id"
        description: "The user id"
        in: form
        required: true
        example: "1"
      - name: "url"
        description: "The url of the page to make a warv of"
        in: form
        required: true
        example: "https://openstate.eu/"
      - name: "external_id"
        description: "The external id for the url of the page to make a warv of"
        in: form
        required: false
        example: "123456-xx-123456-yy"
      - name: "created"
        description: "The creation date of the warc"
        in: form
        required: false
        example: "2024-01-01T00:000:00"
      - name: "modified"
        description: "The midification date of the warc"
        in: form
        required: false
        example: "2024-01-01T00:000:00"
      - name: "last_run"
        description: "When the warc was last sucessfully updated"
        in: form
        required: false
        example: "2024-01-01T00:000:00"
      responses:
        200:
          schema:
            $ref: '#/definitions/Asset'
          examples:
            application/json:
              id: 1
              user_id: 1755
              url: https://openstate.eu/
              external_id: 123456-xx-123456-yy
              created: 2024-01-01T00:00:00
              modified: 2024-01-01T00:00:00
              last_run: 2024-01-01T00:00:00
  /assets/{asset_id}:
    get:
      tags:
        - Assets
      summary: "Get the information of an asset, associated with the logged in user"
      produces:
           - "application/json"
      parameters:
      - name: "asset_id"
        description: "The asset id"
        in: path
        required: true
        example: "1"
      responses:
        200:
          schema:
            $ref: '#/definitions/Asset'
          examples:
            application/json:
              id: 1
              user_id: 1755
              url: https://openstate.eu/
              external_id: 123456-xx-123456-yy
              created: 2024-01-01T00:00:00
              modified: 2024-01-01T00:00:00
              last_run: 2024-01-01T00:00:00
    post:
      tags:
        - Assets
      summary: "Update the asset information, associated with the logged in user."
      produces:
           - "application/json"
      parameters:
      - name: "asset_id"
        description: "The asset id"
        in: path
        required: true
        example: "1"
      responses:
        200:
          schema:
            $ref: '#/definitions/Asset'
          examples:
            application/json:
              id: 1
              user_id: 1755
              url: https://openstate.eu/
              external_id: 123456-xx-123456-yy
              created: 2024-01-01T00:00:00
              modified: 2024-01-01T00:00:00
              last_run: 2024-01-01T00:00:00
    delete:
      tags:
        - Assets
      summary: "Deletes the asset associated with the logged in user."
      produces:
           - "application/json"
      parameters:
      - name: "asset_id"
        description: "The asset id"
        in: path
        required: true
        example: "1"
      responses:
        200:
          schema:
            $ref: '#/definitions/Asset'
          examples:
            application/json:
              id: 1
              user_id: 1755
              url: https://openstate.eu/
              external_id: 123456-xx-123456-yy
              created: 2024-01-01T00:00:00
              modified: 2024-01-01T00:00:00
              last_run: 2024-01-01T00:00:00
  /columns:
    get:
      tags:
        - Feeds
      summary: "Get the associated feeds for the logged in user."
      produces:
           - "application/json"
      responses:
        200:
          schema:
            $ref: '#/definitions/Asset'
          examples:
            application/json:
            - id: 1
              user_id: 1755
              name: Windmolens
              locations: ["GM0181", "GM0140"]
              user_query: windmolens
              order: 0
              src_polflw: true
              src_obv: false
              src_cvdr: false
              src_openspending: false
              sort: date
              sort_order: desc
              date_start: 2024-01-01T00:00:00
              date_end: 2024-02-01T00:00:00
              read_counta: "{cvdr: 0, poliflw: 0}"
    post:
      tags:
        - Feeds
      summary: "Add a new feed for the logged in user."
      produces:
           - "application/json"
      parameters:
      - name: "user_id"
        description: "The user id"
        in: form
        required: true
        example: "1"
      - name: "name"
        description: "The name of the feed"
        in: form
        required: true
        example: "windmolens"
      - name: "locations"
        description: "The locations being monitored for this feed"
        required: false
        example: "[\"GM0181\", \"GM0140\"]"
      - name: user_query
        description: "The query the user wrote."
        required: false
        example: windmolens
      - name: order
        description: Used to list the feeds in order
        required: false
        example: 0
      - name: src_poliflw
        description: "If poliflw is being monitored for this feed"
        required: false
        example: 0
      - name: src_obv
        description: "If openbesluitvorming is being monitored for this feed"
        required: false
        example: 0
      - name: src_cvdr
        description: "If cvdr is being monitored for this feed"
        required: false
        example: 0
      - name: src_openspending
        description: "If openspending is being monitored for this feed"
        required: false
        example: 0
      - name: sort
        description: "The field used for sorting the feed."
        required: false
        example: "date"
      - name: sort_order
        description: whether the feed is sorted in ascending or descending order
        required: false
        example: asc
      - name: date_start
        description: "The start date for which monitoring this feeds begins."
        required: false
        example: 2024-01-02T00:00:00
      - name: date_end
        description: "The end date for which monitoring this feeds begins."
        required: false
        example: 2024-02-01T00:00:00
      - name: read_counts
        description: Keeps tabs of the number of items read in the feed, per source. Is encoded as JSON
        required: false
        example: "{cvdr: 0, poliflw: 0}"
      responses:
        200:
          schema:
            $ref: '#/definitions/Asset'
          examples:
            application/json:
              id: 1
              user_id: 1755
              name: Windmolens
              locations: ["GM0181", "GM0140"]
              user_query: windmolens
              order: 0
              src_polflw: true
              src_obv: false
              src_cvdr: false
              src_openspending: false
              sort: date
              sort_order: desc
              date_start: 2024-01-01T00:00:00
              date_end: 2024-02-01T00:00:00
              read_counta: "{cvdr: 0, poliflw: 0}"

  /columns/{column_id}:
    get:
      tags:
        - Feeds
      summary: "Get the information of a feed, associated with the logged in user"
      produces:
           - "application/json"
      parameters:
      - name: "column_id"
        description: "The id of the feed"
        required: true
        in: path
      responses:
        200:
          schema:
            $ref: '#/definitions/Asset'
          examples:
            application/json:
            - id: 1
              user_id: 1755
              name: Windmolens
              locations: ["GM0181", "GM0140"]
              user_query: windmolens
              order: 0
              src_polflw: true
              src_obv: false
              src_cvdr: false
              src_openspending: false
              sort: date
              sort_order: desc
              date_start: 2024-01-01T00:00:00
              date_end: 2024-02-01T00:00:00
              read_counta: "{cvdr: 0, poliflw: 0}"
    post:
      tags:
        - Feeds
      summary: "Update the feed information, associated with the logged in user."
      produces:
           - "application/json"
      parameters:
      - name: "column_id"
        description: "The id of the feed"
        required: true
        in: path
      - name: "user_id"
        description: "The user id"
        in: form
        required: true
        example: "1"
      - name: "name"
        description: "The name of the feed"
        in: form
        required: true
        example: "windmolens"
      - name: "locations"
        description: "The locations being monitored for this feed"
        required: false
        example: "[\"GM0181\", \"GM0140\"]"
      - name: user_query
        description: "The query the user wrote."
        required: false
        example: windmolens
      - name: order
        description: Used to list the feeds in order
        required: false
        example: 0
      - name: src_poliflw
        description: "If poliflw is being monitored for this feed"
        required: false
        example: 0
      - name: src_obv
        description: "If openbesluitvorming is being monitored for this feed"
        required: false
        example: 0
      - name: src_cvdr
        description: "If cvdr is being monitored for this feed"
        required: false
        example: 0
      - name: src_openspending
        description: "If openspending is being monitored for this feed"
        required: false
        example: 0
      - name: sort
        description: "The field used for sorting the feed."
        required: false
        example: "date"
      - name: sort_order
        description: whether the feed is sorted in ascending or descending order
        required: false
        example: asc
      - name: date_start
        description: "The start date for which monitoring this feeds begins."
        required: false
        example: 2024-01-02T00:00:00
      - name: date_end
        description: "The end date for which monitoring this feeds begins."
        required: false
        example: 2024-02-01T00:00:00
      - name: read_counts
        description: Keeps tabs of the number of items read in the feed, per source. Is encoded as JSON
        required: false
        example: "{cvdr: 0, poliflw: 0}"
      responses:
        200:
          schema:
            $ref: '#/definitions/Asset'
          examples:
            application/json:
            - id: 1
              user_id: 1755
              name: Windmolens
              locations: ["GM0181", "GM0140"]
              user_query: windmolens
              order: 0
              src_polflw: true
              src_obv: false
              src_cvdr: false
              src_openspending: false
              sort: date
              sort_order: desc
              date_start: 2024-01-01T00:00:00
              date_end: 2024-02-01T00:00:00
              read_counta: "{cvdr: 0, poliflw: 0}"
    delete:
      tags:
        - Feeds
      summary: "Deletes the feed associated with the logged in user."
      produces:
           - "application/json"
      parameters:
      - name: "column_id"
        description: "The id of the feed"
        required: true
        in: path
      responses:
        200:
          schema:
            $ref: '#/definitions/Asset'
          examples:
            application/json:
            - id: 1
              user_id: 1755
              name: Windmolens
              locations: ["GM0181", "GM0140"]
              user_query: windmolens
              order: 0
              src_polflw: true
              src_obv: false
              src_cvdr: false
              src_openspending: false
              sort: date
              sort_order: desc
              date_start: 2024-01-01T00:00:00
              date_end: 2024-02-01T00:00:00
              read_counta: "{cvdr: 0, poliflw: 0}"
  /documents/download/{source}/{<external_item_id}:
    get:
      tags:
        - Documents
      summary: "Starts downloading an external file"
      parameters:
      - name: source
        description: specifies the source of the item (poliflw, obv, cvdr, openspending)
        in: path
        required: true
        example: cvdr
      - name: external_id
        description: "The external identifier for the file to be downloaded"
        in: path
        required: true
        example: 123456
      responses:
        301:
          description: "Redirects to the location of the file that is consequentially downloaded."
  /search:
    get:
      tags:
        - Search
      summary: "Perform a search operation over all indexes"
      produces:
           - "application/json"
  /<index_name>/search:
    get:
      tags:
        - Search
      summary: "Perform a search operation over a specific index"
      produces:
           - "application/json"
  /subscriptions/delete:
    get:
      tags:
        - Subscriptions
      summary: "Deletes an email subscription"
      description: "Deletes an email subscription. It uses the <a href=\"https://github.com/openstate/binoas/wiki/API\">binoas API</a> to do so."
      produces:
           - "application/json"
      parameters:
      - name: user_id
        in: query
        required: true
        description: "The id of the user."
        example: 1755
      - name: query_id
        in: query
        required: true
        description: "The id of the registered query, as previously gotten via a new subscription"
      responses:
        200:
          description: "The subscription was deleted."
          examples:
            application/json:
              status: "ok"
  /subscriptions/new:
    get:
      tags:
        - Subscriptions
      summary: "Creates a new email subscription"
      description: "Creates a new email subscription. It uses the <a href=\"https://github.com/openstate/binoas/wiki/API\">binoas API</a> to do so. The payload is JSON data"
      produces:
           - "application/json"
      parameters:
      - name: application
        description: The binoas application. Should be \"ood\"
        in: form
        required: true
        example: ood
      - name: email
        description: The email address to send alerts to
        in: form
        required: true
        example: breyten@openstate.eu
      - name: frequency
        description: The frequency of emails. If emtpy it is direct, otherwise binoas will gather relevant documents and group them to be sent out in the specified frequency.
        in: form
        required: false
        example: 1d
      - name: description
        description: Human readable description of the query. Can be used in the end user UI.
        in: form
        required: false
        example: winmolens daily summary
      - name: query
        description: Elasticsearch query to select relevant documents
        in: form
        required: false
        example:
          match:
            title: Test
      responses:
        200:
          examples:
            application/json:
              user_id: 1755
              query_id: "12345678ABCDEFGH12345678abcdefgh"
definitions:
  Asset:
    type: object
    id:
      type: integer
    user_id:
      type: integer
    url:
      type: string
    external_id:
      type: string
    created:
      type: date
    modified:
      type: date
    last_run:
      type: date
  Column:
    type: object
    id:
      type: integer
    user_id:
      type: integer
    locations:
      type: list
    user_query:
      type: string
    order:
      type: integer
    src_polflw:
      type: boolean
    src_obv:
      type: boolean
    src_cvdr:
      type: boolean
    src_openspending:
      type: boolean
    sort:
      type: string
    sort_order:
      type: string
    date_start:
      type: date
    date_end:
      type: date
    read_counta:
      type: text
