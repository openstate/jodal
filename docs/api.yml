swagger: "2.0" # Swagger version compatible with OAS 3.0
info:
 description: "De API van Bron"
 version: "1.0.0" # This is your api version
 title: "Bron API"
host: "api.bron.live"
basePath: "/"
paths:
  /users/forgot-password:
    post:
      tags:
        - Users
      summary: "Send a forgotten password email to a user"
      description: "This starts a forgotten password sequence for the specified user. A link will be sent where the user can reset his/hr password."
      produces:
        - "application/json"
      parameters:
      - name: "email"
        in: "form" # This is saying that this parameter must be given in a query string
        description: "The email address for which a forgotten password email is sent."
        type: "String"
        required: true
        example: "breyten@openstate.eu"
      responses:
        301:
          description: "The email was succesfully sent. Redirecto to front page."
        200:
          description: "Something went wrong sending out the password lost email"
          schema:
            type: "object"
            error:
              type: "string"
              example: "Something wemt wrong."
          examples:
            application/json: {"error": "Something went wrong."}
  /users/login:
    post:
      tags:
        - Users
      summary: "Starts login procedure for a user."
      description: "Log in a user. The parameters email and password can be specified via the form or via the query, but both need to be present."
      produces:
        - "application/json"
      parameters:
      - name: "email"
        description: "The email address of the user."
        in: "query"
        required: false
      - name: "password"
        description: "The password used for loggin in."
        in: "query"
        required: false
      - name: "email"
        description: "The email address of the user."
        in: "form"
        required: false
      - name: "password"
        description: "The password used for loggin in."
        in: "form"
        required: false
      responses:
        301:
          description: "The login was succesful. Redirecto to front page."
        200:
          description: "Something went wrong loggin in"
          schema:
            type: "object"
            error:
              type: "string"
    get:
      tags:
        - Users
      summary: "Starts login procedure for a user"
      description: "Log in a user. Redirect to frontpage if successful"
      produces:
           - "application/json"
      parameters:
      - name: "email"
        description: "The email address of the user."
        in: "query"
        required: true
      - name: "password"
        description: "The password used for loggin in."
        in: "query"
        required: true
      responses:
        301:
          description: "The login was succesful. Redirecto to front page."
        200:
          description: "Something went wrong loggin in"
          schema:
            type: "object"
            error:
              type: "string"
  /users/passwordless/start:
    get:
      tags:
        - Users
      summary: "Starts a passwordless login for a user."
      description: "Starts a passwordless login for a user. An email address should be provided, or a user id."
      produces:
           - "application/json"
      parameters:
      - name: "email"
        description: "The email address of the user."
        in: "query"
        required: false
      - name: "user_id"
        description: "The user id."
        in: "query"
        required: false
      responses:
        200:
          description: "The procedure was started"
          schema:
            type: "object"
            code:
              type: "string"
              description: "One time use login code. If this key is pesent, the passwordless login start was sucessful."
            error:
              type: "string"
              description: "If this key is present, there as an error sending the password login start. It describes the error."
  /users/passwordless/complete:
    get:
      tags:
        - Users
      summary: "Completes a pasdswordless login for a user"
      description: "Complete the passwordless login. Places cookie and adds session info for further use."
      produces:
        - "application/json"
      parameters:
      - name: "code"
        description: "Login code that was sent."
        in: "query"
        required: true
      responses:
        301:
          description: "The login was succesful. Redirecto to front page."
        200:
          description: "Something went wrong loggin in"
          schema:
            type: "object"
            error:
              description: "The contents describe the error encountered."
              type: "string"
  /users/register:
    post:
      tags:
        - Users
      summary: "Registers a new user"
      description: "Registeres a new user based on the given email address and password. A welcome email is sent."
      produces:
           - "application/json"
      parameters:
      - name: "email"
        description: "The email address of the user."
        in: "form"
        required: true
      - name: "password"
        description: "The password used for logging in."
        in: "form"
        required: true
      responses:
        301:
          description: "The registration was succesful and an email was sent. Redirecto to front page."
        200:
          description: "Something went wrong registering the user. The contents describe the error encountered."
          schema:
            type: "object"
            error:
              type: "string"
  /users/delete:
    get:
      tags:
        - Users
      summary: "Deletes a user"
      description: "Deletes a user and his/her associated info from the database. Only a logged in user can delete her/himself using this method."
      produces:
           - "application/json"
      responses:
        200:
          description: "The user was deleted. Redirects to the front page."
  /users/simple/me:
    get:
      tags:
        - Users
      summary: "Returns the information of the currently logged in user"
      description: "Returns the info about the user, which is kept in the session."
      produces:
           - "application/json"
      responses:
        200:
          description: "The user data returned. null if not logged in."
          schema:
            type: "object"
            applicationId:
              type: "string"
              description: The application id
            email:
              type: "string"
              description: "The email address of the user."
            email_verified:
              type: "boolean"
              description: "Whether the user was verified or not."
            family_name:
              type: "string"
              description: "The family name of the user"
            given_name:
              type: "string"
              description: "The given name of the user"
            roles:
              type: "list"
              description: "The roles that this user has in admin"
            sub:
              type: "string"
              description : "Show the interal id user for the user,:"
          example:
            applicationId: "6e11ceb9-2b26-4c40-b399-182d4f9b97b6"
            email: "bje@dds.nl"
            email_verified: false
            family_name: "Ernsting"
            given_name: "Breyten"
            roles:
            - User
            sub: "6e11ceb9-2b26-4c40-b399-182d4f9b97b6"
  /users/simple/login:
    get:
      tags:
        - Users
      summary: "Old way to login"
      description: "Login via the fusionauth login form. Not actively used anymore."
      produces:
           - "application/json"
  users/simple/logout:
    get:
      tags:
        - Users
      summary: "Old way to log the user out"
      description: "Old way to logout, via fusionauth logout redirect url. Not actively used anymore."
      produces:
           - "application/json"
  /user/simple/register:
    get:
      tags:
        - Users
      summary: "Old way to register a new user"
      description: "Old way to register a new user via the fusionauth form. Not actively used anymore."
      produces:
           - "application/json"
  /users/simple/callback:
    get:
      tags:
        - Users
      summary: "Completes a OAuth2 login process"
      description: "This is the callback that completes a login sequence. It is used by fusionauth, sets the cookie. It also saves via which of the marketing campaing you logged in, if applicable. This happens mostly when you came in via a link to register."
  /archive/warc/create:
    get:
      tags:
        - WARC
      summary: "Starts a procedure to get heritrix to make a WARC archive of the given URL."
      produces:
           - "application/json"
  /archive/warc/download/<archive_id>:
    get:
      tags:
        - WARC
      summary: "Downloads the given WARC file to your computer."
      produces:
           - "application/json"
  /archive/warc/<archive_id>:
    get:
      tags:
        - WARC
      summary: "Get the status of a warc given archive"
      produces:
           - "application/json"
  /archive/warcs/<archive_ids_str>:
    get:
      tags:
        - WARC
      summary: "Get the status of the given warcs files (separated by ,)"
      produces:
           - "application/json"
  /assets:
    get:
      tags:
        - Assets
      summary: "Returns the assets associated with the logged in user."
      produces:
           - "application/json"
    post:
      tags:
        - Assets
      summary: "Create a new asset associated with the logged in user."
      produces:
           - "application/json"
  /assets/<int:asset_id>:
    get:
      tags:
        - Assets
      summary: "Get the information of an asset, associated with the logged in user"
      produces:
           - "application/json"
    post:
      tags:
        - Assets
      summary: "Update the asset information, associated with the logged in user."
      produces:
           - "application/json"
    delete:
      tags:
        - Assets
      summary: "Deletes the asset associated with the logged in user."
      produces:
           - "application/json"
  /columns:
    get:
      tags:
        - Feeds
      summary: "Get the associated feeds for the logged in user."
      produces:
           - "application/json"
    post:
      tags:
        - Feeds
      summary: "Add a new feed for the logged in user."
      produces:
           - "application/json"
  /columns/<int:column_id>:
    get:
      tags:
        - Feeds
      summary: "Get the information of a feed, associated with the logged in user"
      produces:
           - "application/json"
    post:
      tags:
        - Feeds
      summary: "Update the feed information, associated with the logged in user."
      produces:
           - "application/json"
    delete:
      tags:
        - Feeds
      summary: "Deletes the feed associated with the logged in user."
      produces:
           - "application/json"
  /documents/download/<source>/<external_item_id>:
    get:
      tags:
        - Documents
      summary: "Starts downloading an external file"
  /search:
    get:
      tags:
        - Search
      summary: "Perform a search operation over all indexes"
      produces:
           - "application/json"
  /<index_name>/search:
    get:
      tags:
        - Search
      summary: "Perform a search operation over a specific index"
      produces:
           - "application/json"
  /subscriptions/delete:
    get:
      tags:
        - Subscriptions
      summary: "Deletes an email subscription"
      produces:
           - "application/json"
  /subscriptions/new:
    get:
      tags:
        - Subscriptions
      summary: "Creates a new email subscription"
      produces:
           - "application/json"
components:
  parameters:
    users_login:
      - name: "email"
        in: "query"
        required: false
      - name: "password"
        in: "query"
        required: false
      - name: "email"
        in: "form"
        required: false
      - name: "password"
        in: "form"
        required: false
  responses:
    users_login:
