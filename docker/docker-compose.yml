version: "2.1"
services:
  nginx:
    build:
      context: .
      dockerfile: Dockerfile-nginx
    depends_on:
      - api-jodal
      - fusionauth
    volumes:
      - ./nginx-start/:/opt/nginx/
      - ./nginx/:/etc/nginx/
      - ../public/:/usr/share/nginx/html/
      - ../www/:/usr/share/nginx/html-www/
      - ../www-pdd/:/usr/share/nginx/html-www-pdd/
      - ../docs:/usr/share/nginx/html-docs/
    restart: always
    networks:
      - nginx-load-balancer
      - jodal
  api-jodal:
    build:
      context: ../backend/app
      dockerfile: Dockerfile
    depends_on:
      - elasticsearch
    volumes:
      - ../backend:/opt/jodal
      - ../heritrix/jobs:/heritrix/jobs
    environment:
      OAUTHLIB_INSECURE_TRANSPORT: "1"
    networks:
      - jodal
    restart: always
    command: flask run --host=0.0.0.0
  node:
    image: node:12.9.1
    working_dir: /opt/app/static
    networks:
      - jodal
    volumes:
      - ../:/opt/app
    restart: always
    # Use this to keep the container running
    command: bash -c "npm install && npm run start"
  frontend:
    build:
      context: ../frontend
    environment:
      - PORT=3000
    networks:
      - jodal
    volumes:
      - ../frontend:/opt/app
    restart: always
    # Use this to keep the container running
    # command: npm run start
    tty: true
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    depends_on:
      mysql:
        condition: service_healthy
    volumes:
      - ../backend:/opt/jodal
      - ../heritrix:/opt/jodal/heritrix
    networks:
      - jodal
    restart: always
  worker:
    build:
      context: ../backend
      dockerfile: Dockerfile
    volumes:
      - ../backend:/opt/jodal
    networks:
      - jodal
    restart: always
    command: ./manage.py worker run
  redis:
    image: "redis:${REDIS_VERSION}"
    networks:
      - jodal
    volumes:
     - redisdata:/data
    sysctls:
     - net.core.somaxconn=65535
    command: ["redis-server", "--appendonly", "no", "--save", "\"\""]
    #mem_limit: 1g
    restart: always
  mysql:
    image: mysql:8.0
    # This root password will be overwritten with the password used in
    # the backup that will be restored from a .sql file in the
    # docker-entrypoint-initdb.d directory.
    environment:
      - MYSQL_DATABASE=jodal
      - MYSQL_ROOT_PASSWORD=jodal
    healthcheck:
      test: ["CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD']
      timeout: 20s
      retries: 10
    networks:
      - jodal
    volumes:
      - jodal-mysql-volume:/var/lib/mysql
      - "./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d"
    restart: always
    command: ['mysqld', '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci', '--default-authentication-plugin=mysql_native_password']

  fusionauth:
    build:
      context: ./
      dockerfile: Dockerfile-fusionauth
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      DATABASE_URL: jdbc:mysql://mysql:3306/fusionauth
      DATABASE_ROOT_USERNAME: root
      DATABASE_ROOT_PASSWORD: jodal
      DATABASE_USERNAME: root
      DATABASE_PASSWORD: jodal
      FUSIONAUTH_APP_MEMORY: 512M
      SEARCH_TYPE: database
      FUSIONAUTH_APP_URL: http://users.bron.live
      FUSIONAUTH_RUNTIME_MODE: development
      FUSIONAUTH_APP_KICKSTART_FILE: /opt/kickstart/kickstart.json
    networks:
     - jodal
    #ports:
    # - "9011:9011"
    restart: always
    volumes:
      - fa_config:/usr/local/fusionauth/config
      - ./fa-kickstart/:/opt/kickstart
  elasticsearch:
    image: "docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}"
    environment:
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - cluster.name=ras-cluster
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms16g -Xmx16g -Dlog4j2.formatMsgNoLookups=true"
      - xpack.monitoring.enabled=false
      - 'path.repo=/opt/elasticsearch/backups'
    ulimits:
      memlock:
        soft: -1
        hard: -1
    cap_add:
      - IPC_LOCK
    volumes:
      - esdata:/usr/share/elasticsearch/data
      - ../backups/elasticsearch:/opt/elasticsearch/backups
    restart: always
    networks:
      - jodal
  texter:
    build:
      context: ../texter
    networks:
      - jodal
    restart: always
  heritrix:
    image : "iipc/heritrix"
    environment:
      - USERNAME=jodal
      - PASSWORD=jodal
      - "JAVA_OPTS=-Xms4g -Xmx4g -Dlog4j2.formatMsgNoLookups=true"
    networks:
      - jodal
    volumes:
      - ../heritrix/jobs:/opt/heritrix/jobs
  swagger:
    image: "swaggerapi/swagger-ui"
    environment:
      - SWAGGER_JSON=/mnt/api.yml
    networks:
      - jodal
    volumes:
      - ../docs:/mnt
volumes:
  esbackups:
    driver: local
  esdata:
    driver: local
  jodal-mysql-volume:
    driver: local
  fa_config:
    driver: local
  redisdata:
    driver: local
  heritrixjobs:
    driver: local
networks:
  jodal:
  nginx-load-balancer:
    external:
      name: docker_nginx-load-balancer
